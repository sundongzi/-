(self.webpackChunkdaily_summary=self.webpackChunkdaily_summary||[]).push([[9203],{7627:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-f2585598",path:"/%E5%8D%9A%E5%AE%A2%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%8C%96.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"博客学习/数字格式化.md",git:{updatedTime:1615448503e3,contributors:[{name:"sundong",email:"sundong@idss-cn.com",commits:1}]}}},1346:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token comment">//str</span>\n    \n<span class="token comment">//size-每隔几个字符进行分割 默认3</span>\n    \n<span class="token comment">//delimiter-分割符 默认&#39;,&#39;</span>\n    \n<span class="token keyword">function</span> <span class="token function">formatText</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>size<span class="token punctuation">,</span>delimiter</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> _str<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       \n  <span class="token keyword">var</span> _size<span class="token operator">=</span>size<span class="token operator">||</span><span class="token number">3</span><span class="token punctuation">,</span>_delimiter<span class="token operator">=</span>delimiter<span class="token operator">||</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>      \n  <span class="token comment">/* \n     如果_size是3\n     &quot;\\d{1,3}(?=(\\d{3})+$)&quot; \n  */</span>\n  <span class="token keyword">var</span> regText<span class="token operator">=</span><span class="token string">&#39;\\\\d{1,&#39;</span><span class="token operator">+</span>_size<span class="token operator">+</span><span class="token string">&#39;}(?=(\\\\d{&#39;</span><span class="token operator">+</span>_size<span class="token operator">+</span><span class="token string">&#39;})+$)&#39;</span><span class="token punctuation">;</span>        \n  <span class="token comment">/*   \n    /\\d{1,3}(?=(\\d{3})+$)/g     这个正则的意思：匹配连续的三个数字，但是这些三个数字不能是字符串的开头1-3个字符  \n  */</span>      \n  <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regText<span class="token punctuation">,</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       \n  <span class="token comment">/* \n     (-?) 匹配前面的-号   (\\d+)匹配中间的数字   ((\\.\\d+)?)匹配小数点后面的数字\n     //$0-匹配结果，$1-第一个括号返回的内容----(-?)    $2,$3如此类推  \n  */</span>     \n  <span class="token keyword">return</span> _str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(-?)(\\d+)((\\.\\d+)?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token number">1</span><span class="token punctuation">,</span> $<span class="token number">2</span><span class="token punctuation">,</span> $<span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> $<span class="token number">1</span> <span class="token operator">+</span> $<span class="token number">2.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;$&amp;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> $<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>![image-20200603171104739](/Users/sundong/Library/Application Support/typora-user-images/image-20200603171104739.png)</p>',2),e={render:function(n,s){return p}}}}]);