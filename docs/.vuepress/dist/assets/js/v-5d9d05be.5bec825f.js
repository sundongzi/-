(self.webpackChunkdaily_summary=self.webpackChunkdaily_summary||[]).push([[8764],{8190:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-5d9d05be",path:"/VUE/%E7%94%9F%E6%88%90%E6%A8%A1%E6%9D%BF%E6%96%B9%E5%BC%8F.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"VUE/生成模板方式.md",git:{updatedTime:1615448503e3,contributors:[{name:"sundong",email:"sundong@idss-cn.com",commits:1}]}}},5568:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>fn});var e=a(6252);const p=(0,e.Wm)("h4",{id:"vue-cli-vscode-snippet"},[(0,e.Wm)("a",{class:"header-anchor",href:"#vue-cli-vscode-snippet"},"#"),(0,e.Uk)(" Vue-cli && Vscode-snippet")],-1),t=(0,e.Wm)("h4",{id:"一、vue-cli"},[(0,e.Wm)("a",{class:"header-anchor",href:"#一、vue-cli"},"#"),(0,e.Uk)(" 一、vue-cli")],-1),o={href:"https://github.com/vuejs/vue-cli",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Wm)("code",null,"vue-cli",-1),l=(0,e.Uk)(" 是 "),r={href:"https://github.com/vuejs/vue",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("vuejs"),i=(0,e.Uk)(" 官方提供的基于 vuejs 的项目脚手架工具，其中"),d=(0,e.Wm)("code",null,"vue init（针对vue-cli@2.x版本）",-1),m=(0,e.Uk)(" 是基于第三方模板生成项目的命令，简单说下生成模板的流程："),k=(0,e.uE)('<p>![image-20200630160825955](/Users/sundong/Library/Application Support/typora-user-images/image-20200630160825955.png)</p><h5 id="具体如何生成模板如下"><a class="header-anchor" href="#具体如何生成模板如下">#</a> 具体如何生成模板如下：</h5><p>前提：</p><p>1.模板仓库的根目录下必须有<code>template</code>目录，在该目录下定义你的模板文件</p><p>2.模板仓库的根目录下必须有<code>meta.{js,json}</code>文件，该文件必须导出为一个对象，用于定义模板的<code>meta</code>信息</p><h5 id="对于meta-js-json-文件-目前可定义的字段如下"><a class="header-anchor" href="#对于meta-js-json-文件-目前可定义的字段如下">#</a> 对于<code>meta.{js,json}</code>文件，目前可定义的字段如下</h5>',6),b=(0,e.Wm)("li",null,[(0,e.Wm)("code",null,"prompts<Object>"),(0,e.Uk)("：收集用户自定义数据")],-1),h=(0,e.Wm)("li",null,[(0,e.Wm)("code",null,"filters<Object>"),(0,e.Uk)(":根据条件过滤文件")],-1),g=(0,e.Wm)("code",null,"completeMessage<String>",-1),q=(0,e.Uk)(":模板渲染完成后给予的提示信息，支持"),v={href:"https://www.handlebarsjs.cn/guide/#%E4%BB%80%E4%B9%88%E6%98%AF-handlebars%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("handlebars"),j=(0,e.Uk)("（一种简单的模板语言，使用模板和输入对象来生成HTML或其他文本格式）的表达式"),W=(0,e.Wm)("li",null,[(0,e.Wm)("code",null,"complete<Function>"),(0,e.Uk)(":模板渲染完成后的回调函数，优先于"),(0,e.Wm)("code",null,"completeMessage")],-1),y=(0,e.Wm)("li",null,[(0,e.Wm)("code",null,"helpers<Object>"),(0,e.Uk)(":自定义"),(0,e.Wm)("code",null,"Handlebars"),(0,e.Uk)("辅助函数")],-1),U=(0,e.Wm)("h5",{id:"prompts"},[(0,e.Wm)("a",{class:"header-anchor",href:"#prompts"},"#"),(0,e.Uk)(" prompts")],-1),w=(0,e.Wm)("code",null,"prompts",-1),E=(0,e.Uk)("是一个对象，每个"),x=(0,e.Wm)("code",null,"prompts",-1),S=(0,e.Uk)("都是一个"),_={href:"https://github.com/SBoudrias/Inquirer.js/#question",target:"_blank",rel:"noopener noreferrer"},B=(0,e.Uk)("Inquirer.js"),A=(0,e.uE)('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// meta.{js,json}</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;prompts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;projectName&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;required&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;项目名称&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;confirm&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test?&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',1),C=(0,e.Uk)("所有的用户输入完成之后，"),F=(0,e.Wm)("code",null,"template",-1),L=(0,e.Uk)("目录底下的所有文件将会用"),V={href:"https://www.handlebarsjs.cn/guide/#%E4%BB%80%E4%B9%88%E6%98%AF-handlebars%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},z=(0,e.Uk)("Handlebars"),H=(0,e.Uk)("进行渲染。用户输入的数据会作为模板渲染时的使用数据："),M=(0,e.uE)('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// template/package.json</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span>#test<span class="token punctuation">}</span><span class="token punctuation">}</span>\n <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run test&quot;</span>\n <span class="token punctuation">{</span><span class="token punctuation">{</span>/test<span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在上述示例中，只有用户在<code>test</code>中的回答是<code>yes</code>时，<code>test</code>脚本才会在<code>package.json</code>文件中生成</p><p><code>prompt</code>可以添加一个<code>when</code>字段，该字段表示此<code>prompt</code>会根据<code>when</code>的值判断是否出现在终端提示用户进行输入.在<code>vue-cli</code>中，会根据<code>when</code>进行<code>eval</code>运算</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ...</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>prompt<span class="token punctuation">.</span>when <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">evaluate</span><span class="token punctuation">(</span>prompt<span class="token punctuation">.</span>when<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>示例如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// meta.{js,json}</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;prompts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;confirm&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>Use ESLint to lint your code?&quot;\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;eslint&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;when&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 只有lint为yes时才会在终端触发显示eslint</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;是否使用eslint？&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;choices&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;standard&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;airbnb&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;none&quot;</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>注意：针对<code>prompts</code>默认终端会显示<code>name（用户git昵称）</code>和<code>当前作者（用户邮箱）</code>两个交互让用户去输入，这个是<code>vue-cli</code>的问题，<a href="*https://github.com/vuejs/vue-cli/issues/1570*">具体请参考</a></p><h5 id="filters"><a class="header-anchor" href="#filters">#</a> filters</h5><p><code>filters</code>字段是一个包含文件过滤规则的对象，键用于定义符合<code>minimatch glob pattern</code>规则的过滤器，键值是<code>prompts</code>中用户的输入值或表达式。比如：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// meta.{js,json}</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;prompts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;unit&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;confirm&quot;</span><span class="token punctuation">,</span>\n          <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Setup unit tests with Mocha?&quot;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;filters&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;test/*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;unit&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在上述示例中,<code>template</code>目录下<code>test</code>目录只有在用户<code>unit</code>中的回答是<code>yes</code>时才会生成，反之会被删除</p>',11),O=(0,e.Uk)("如果要匹配以"),P=(0,e.Wm)("code",null,".",-1),T=(0,e.Uk)("开头的文件，则需要将"),I={href:"https://github.com/isaacs/minimatch",target:"_blank",rel:"noopener noreferrer"},N=(0,e.Uk)("minimatch"),$=(0,e.Uk)("的 "),D=(0,e.Wm)("code",null,"dot",-1),R=(0,e.Uk)("选项设置成"),Y=(0,e.Wm)("code",null,"true",-1),G=(0,e.uE)('<h5 id="helpers"><a class="header-anchor" href="#helpers">#</a> helpers</h5><p><code>helpers</code>字段是一个包含自定义的<code>Handlebars</code>辅助函数的对象，自定义的函数可以在<code>template</code>中使用：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// meta.{js,json}</span>\n<span class="token punctuation">{</span>\n\t<span class="token property">&quot;helpers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t    <span class="token property">&quot;if_or&quot;</span><span class="token operator">:</span> function (v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> options) <span class="token punctuation">{</span>\n\t      if (v1 || v2) <span class="token punctuation">{</span>\n\t        return options.fn(this);\n\t      <span class="token punctuation">}</span>\n\t\n\t      return options.inverse(this);\n\t    <span class="token punctuation">}</span>\n  \t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在<code>template</code>的文件使用该<code>if_or</code>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token punctuation">{</span>#if_or val1 val2<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token comment">// 当 val1 或者 val2 为 true 时, 这里才会被渲染</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span>if_or<span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="complete"><a class="header-anchor" href="#complete">#</a> complete</h5><p>在渲染完成后的<code>complete</code>回调：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n\t<span class="token string">&quot;complete&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> helpers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>data</code>和<code>helpers</code>由<code>vue cli</code>传入：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// vue-cli/lib/generate.js</span>\n<span class="token comment">// vue-cli/lib/generate.js</span>\n\n<span class="token comment">// ...</span>\n<span class="token keyword">var</span> data <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>metalsmith<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tdestDirName<span class="token operator">:</span> name<span class="token punctuation">,</span>\n\tinPlace<span class="token operator">:</span> dest <span class="token operator">===</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tnoEscape<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token comment">// files 是 metalsmith build 之后的文件对象</span>\n<span class="token keyword">var</span> helpers <span class="token operator">=</span> <span class="token punctuation">{</span>chalk<span class="token punctuation">,</span> logger<span class="token punctuation">,</span> files<span class="token punctuation">}</span>\n\n<span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>如果<code>complete</code>有定义，则调用<code>complete</code>，反之会输出<code>completeMessage</code></p>',11),J={href:"https://zhuanlan.zhihu.com/p/32894283",target:"_blank",rel:"noopener noreferrer"},K=(0,e.Uk)("参考链接"),Q={href:"https://github.com/dwqs/blog/issues/56",target:"_blank",rel:"noopener noreferrer"},X=(0,e.Uk)("vue-cli源码学习"),Z=(0,e.uE)('<h4 id="二、使用vscode生成代码片段"><a class="header-anchor" href="#二、使用vscode生成代码片段">#</a> 二、使用vscode生成代码片段</h4><h5 id="代码片段分为两种"><a class="header-anchor" href="#代码片段分为两种">#</a> 代码片段分为两种：</h5><ol><li><p>全局代码片段（每种语言环境下都能触发代码块），新建全局代码片段会在<code>snippets</code>目录下生成<code>.code-snippets</code>为后缀的配置文件，</p></li><li><p>对应语言的局部代码片段，新建对应语言的片段会在<code>snippets</code>目录下生成<code>对应语言 + .json</code>的配置文件</p><p>![image-20200630165848188](/Users/sundong/Library/Application Support/typora-user-images/image-20200630165848188.png)</p></li></ol><h5 id="新建片段方式"><a class="header-anchor" href="#新建片段方式">#</a> 新建片段方式</h5><ul><li><p>文件 =》首选项=》用户代码片段=》选择<code>代码段应显示的语言</code>，比如输入<code>vue</code>就会生成<code>vue.json</code></p></li><li><p><code>ctrl + shift + p</code>打开命令窗口，输入<code>snippet</code>，点选配置「用户代码片段」</p></li><li><p>点击界面最左侧竖栏（也即活动栏）最下方的<strong>齿轮</strong>按钮，在弹出来的菜单中点选「用户代码片段」</p><p>![image-20200630151853178](/Users/sundong/Library/Application Support/typora-user-images/image-20200630151853178.png)</p><h5 id="ps-对于全局代码片段-带有后缀-code-snippets的json文件-可以限定到项目中-只需要把相关文件放到-vscode文件夹中项目的根目录下即可。"><a class="header-anchor" href="#ps-对于全局代码片段-带有后缀-code-snippets的json文件-可以限定到项目中-只需要把相关文件放到-vscode文件夹中项目的根目录下即可。">#</a> PS：对于全局代码片段（带有后缀.code-snippets的json文件）可以限定到项目中，只需要把相关文件放到.vscode文件夹中项目的根目录下即可。</h5><p>![image-20200630164324524](/Users/sundong/Library/Application Support/typora-user-images/image-20200630164324524.png)</p></li></ul><h5 id="语法结构"><a class="header-anchor" href="#语法结构">#</a> 语法结构</h5><h5 id="prefix-前缀-代码从intellisence中呼出的关键字"><a class="header-anchor" href="#prefix-前缀-代码从intellisence中呼出的关键字">#</a> prefix：前缀，代码从<code>IntelliSence</code>中呼出的关键字</h5><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>支持N:1,也就是允许多条前缀对应同一条代码片段，只需把前缀定义为数组即可\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>![image-20200630162101770](/Users/sundong/Library/Application Support/typora-user-images/image-20200630162101770.png)</p><h5 id="scope-域。代码片段适用的语言模式-不填代表适用于所有语言模式"><a class="header-anchor" href="#scope-域。代码片段适用的语言模式-不填代表适用于所有语言模式">#</a> scope：域。代码片段适用的<code>语言模式</code>,不填代表适用于所有语言模式</h5><h5 id="body-主体。代码片的布局与控制-每个字符串表示一行"><a class="header-anchor" href="#body-主体。代码片的布局与控制-每个字符串表示一行">#</a> body：主体。代码片的<code>布局与控制</code>，每个字符串表示一行</h5>',11),nn=(0,e.uE)("<li><p>Tabstops：制表符。可以让编辑器的指针在<code>snippet</code>内跳转。使用 <code>$1</code>，<code>$2</code> 等指定光标位置。这些数字指定了光标跳转的顺序。特别地，<code>$0</code>表示最终光标位置。</p></li><li><p>Placeholders：占位符。带有默认的<code>Tabstops</code>,还支持嵌套</p></li><li><p>Choice:可选项。是提供可选值的「Placeholder」。其语法为一系列用逗号隔开，并最终被两个竖线圈起来的枚举值，比如 <code>${1|one,two,three|}</code>。当光标跳转到该位置的时候，用户将会被提供多个值（one 或 two 或 three）以供选择</p><p>![image-20200630162946295](/Users/sundong/Library/Application Support/typora-user-images/image-20200630162946295.png)</p></li>",3),sn=(0,e.Uk)("Variables：变量。"),an={href:"https://code.visualstudio.com/docs/editor/userdefinedsnippets",target:"_blank",rel:"noopener noreferrer"},en=(0,e.Uk)("官方链接"),pn=(0,e.uE)('<h5 id="description-描述。代码在intellisence中的描述。"><a class="header-anchor" href="#description-描述。代码在intellisence中的描述。">#</a> description：描述。代码在<code>IntelliSence</code>中的描述。</h5><h5 id="举个🌰"><a class="header-anchor" href="#举个🌰">#</a> 举个🌰：</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n    <span class="token string">&quot;vue template&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token string">&quot;&lt;template&gt;&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;  &lt;div class=\\&quot;page\\&quot;&gt;&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;    &lt;el-row type=\\&quot;flex\\&quot;&gt;&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;    &lt;/el-row&gt;&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;  &lt;/div&gt;&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;&lt;/template&gt;&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;&lt;script&gt;&quot;</span><span class="token punctuation">,</span>\n\t\t\t<span class="token string">&quot;export default {&quot;</span><span class="token punctuation">,</span>\n\t\t    <span class="token string">&quot;  name: &#39;&#39;,&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;  data () {&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;    return {&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;    }&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;  },&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;  components: {&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;  }&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;&lt;/script&gt;&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;&lt;style scoped lang=\\&quot;postcss\\&quot;&gt;&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;&lt;/style&gt;&quot;</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue相关代码片段&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',3),tn={href:"https://code.visualstudio.com/docs/editor/userdefinedsnippets",target:"_blank",rel:"noopener noreferrer"},on=(0,e.Uk)("官方参考链接"),cn=(0,e.Wm)("h5",{id:"多叨叨一点-关于有些插件是否真的需要"},[(0,e.Wm)("a",{class:"header-anchor",href:"#多叨叨一点-关于有些插件是否真的需要"},"#"),(0,e.Uk)(" 多叨叨一点（关于有些插件是否真的需要？）")],-1),ln=(0,e.Wm)("h5",{id:"可以先通过ctrl-shift-p调出命令面板-然后输入show-running-extensions-查看各个扩展在vscode启动时的加载时间"},[(0,e.Wm)("a",{class:"header-anchor",href:"#可以先通过ctrl-shift-p调出命令面板-然后输入show-running-extensions-查看各个扩展在vscode启动时的加载时间"},"#"),(0,e.Uk)(" 可以先通过ctrl + shift + p调出命令面板，然后输入"),(0,e.Wm)("code",null,"Show Running Extensions"),(0,e.Uk)("，查看各个扩展在vscode启动时的加载时间")],-1),rn=(0,e.Wm)("p",null,"![image-20200623110959563](/Users/sundong/Library/Application Support/typora-user-images/image-20200623110959563.png)",-1),un={href:"https://zhuanlan.zhihu.com/p/125773296",target:"_blank",rel:"noopener noreferrer"},dn=(0,e.Uk)("应该考虑卸载的vscode扩展"),mn=(0,e.uE)('<p>理由如下：</p><ol><li><p>启动慢，很多扩展是启动 VSCode 的时候就开始加载的，所以不一定是 VSCode 自身变慢了，可能是你扩展装多了。</p></li><li><p>扩展之间的冲突</p></li><li><p>功能重复</p></li><li><p>cpu占用过高</p></li><li><h5 id="功能已经被vscode内置-比如document-this插件-vscode已经内置自动生成jsdoc和注释补全功能"><a class="header-anchor" href="#功能已经被vscode内置-比如document-this插件-vscode已经内置自动生成jsdoc和注释补全功能">#</a> 功能已经被vscode内置，比如<code>Document This</code>插件，VSCode已经内置自动生成jsdoc和注释补全功能</h5></li><li><p>维护不积极的扩展，好多扩展作者已经n多年前没有维护了</p></li></ol>',2),kn={id:"建议多参考一下vscode官网-尽量避免乱装插件"},bn=(0,e.Wm)("a",{class:"header-anchor",href:"#建议多参考一下vscode官网-尽量避免乱装插件"},"#",-1),hn=(0,e.Uk)(" 建议多参考一下"),gn={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},qn=(0,e.Uk)("vscode官网"),vn=(0,e.Uk)("，尽量避免乱装插件~"),fn={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,t,(0,e.Wm)("p",null,[(0,e.Wm)("a",o,[c,(0,e.Wm)(a)]),l,(0,e.Wm)("a",r,[u,(0,e.Wm)(a)]),i,d,m]),k,(0,e.Wm)("ul",null,[b,h,(0,e.Wm)("li",null,[g,q,(0,e.Wm)("a",v,[f,(0,e.Wm)(a)]),j]),W,y]),U,(0,e.Wm)("p",null,[w,E,x,S,(0,e.Wm)("a",_,[B,(0,e.Wm)(a)])]),A,(0,e.Wm)("p",null,[C,F,L,(0,e.Wm)("a",V,[z,(0,e.Wm)(a)]),H]),M,(0,e.Wm)("p",null,[O,P,T,(0,e.Wm)("a",I,[N,(0,e.Wm)(a)]),$,D,R,Y]),G,(0,e.Wm)("p",null,[(0,e.Wm)("a",J,[K,(0,e.Wm)(a)])]),(0,e.Wm)("p",null,[(0,e.Wm)("a",Q,[X,(0,e.Wm)(a)])]),Z,(0,e.Wm)("ul",null,[nn,(0,e.Wm)("li",null,[(0,e.Wm)("p",null,[sn,(0,e.Wm)("a",an,[en,(0,e.Wm)(a)])])])]),pn,(0,e.Wm)("p",null,[(0,e.Wm)("a",tn,[on,(0,e.Wm)(a)])]),cn,ln,rn,(0,e.Wm)("p",null,[(0,e.Wm)("a",un,[dn,(0,e.Wm)(a)])]),mn,(0,e.Wm)("h5",kn,[bn,hn,(0,e.Wm)("a",gn,[qn,(0,e.Wm)(a)]),vn])],64)}}}}]);